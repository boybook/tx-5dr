name: Build and Push Docker Image

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Docker image tag (leave empty for auto-generated)'
        required: false
        default: ''

env:
  DOCKER_IMAGE_NAME: tx-5dr
  PLATFORMS: linux/amd64,linux/arm64,linux/arm/v8

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    timeout-minutes: 90

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate image tags
        id: tags
        run: |
          # Docker Hub 用户名从 secrets 获取
          DOCKER_USERNAME="${{ secrets.DOCKER_HUB_USERNAME }}"

          # 如果用户名未设置，使用默认值（仅用于显示，不会推送）
          if [ -z "$DOCKER_USERNAME" ]; then
            echo "⚠️ Warning: DOCKER_HUB_USERNAME not set"
            DOCKER_USERNAME="your-dockerhub-username"
          fi

          # 生成标签
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)

          # 基础标签
          TAGS="${DOCKER_USERNAME}/${DOCKER_IMAGE_NAME}:latest"
          TAGS="${TAGS},${DOCKER_USERNAME}/${DOCKER_IMAGE_NAME}:${SHORT_SHA}"

          # 如果是手动触发且指定了标签
          if [ -n "${{ github.event.inputs.tag }}" ]; then
            TAGS="${TAGS},${DOCKER_USERNAME}/${DOCKER_IMAGE_NAME}:${{ github.event.inputs.tag }}"
          fi

          echo "tags=${TAGS}" >> $GITHUB_OUTPUT
          echo "docker_username=${DOCKER_USERNAME}" >> $GITHUB_OUTPUT
          echo "short_sha=${SHORT_SHA}" >> $GITHUB_OUTPUT

          echo "📦 Generated tags:"
          echo "${TAGS}" | tr ',' '\n'

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64,linux/arm64,linux/arm/v8

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest
            network=host

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ env.PLATFORMS }}
          push: true
          tags: ${{ steps.tags.outputs.tags }}
          cache-from: type=registry,ref=${{ steps.tags.outputs.docker_username }}/${{ env.DOCKER_IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ steps.tags.outputs.docker_username }}/${{ env.DOCKER_IMAGE_NAME }}:buildcache,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
          labels: |
            org.opencontainers.image.title=${{ env.DOCKER_IMAGE_NAME }}
            org.opencontainers.image.description=TX-5DR Digital Radio System
            org.opencontainers.image.url=https://github.com/${{ github.repository }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.version=${{ steps.tags.outputs.short_sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Update Docker Hub description
        uses: peter-evans/dockerhub-description@v3
        continue-on-error: true
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
          repository: ${{ steps.tags.outputs.docker_username }}/${{ env.DOCKER_IMAGE_NAME }}
          readme-filepath: ./docker/README.md

      - name: Build summary
        run: |
          echo "## 🎉 Docker 镜像构建成功" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 镜像信息" >> $GITHUB_STEP_SUMMARY
          echo "- **仓库**: \`${{ steps.tags.outputs.docker_username }}/${{ env.DOCKER_IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **架构**: \`linux/amd64, linux/arm64, linux/arm/v8 (树莓派)\`" >> $GITHUB_STEP_SUMMARY
          echo "- **提交**: \`${{ steps.tags.outputs.short_sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🏷️ 标签" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.tags.outputs.tags }}" | tr ',' '\n' >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 使用方法" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "# 拉取最新镜像" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ steps.tags.outputs.docker_username }}/${{ env.DOCKER_IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# 运行容器" >> $GITHUB_STEP_SUMMARY
          echo "docker run -d -p 8076:80 --name tx-5dr ${{ steps.tags.outputs.docker_username }}/${{ env.DOCKER_IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# 或使用 docker-compose" >> $GITHUB_STEP_SUMMARY
          echo "docker-compose up -d" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 链接" >> $GITHUB_STEP_SUMMARY
          echo "- [Docker Hub]( https://hub.docker.com/r/${{ steps.tags.outputs.docker_username }}/${{ env.DOCKER_IMAGE_NAME }})" >> $GITHUB_STEP_SUMMARY
          echo "- [GitHub Repository](https://github.com/${{ github.repository }})" >> $GITHUB_STEP_SUMMARY
