name: Build and Release Electron App

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0, leave empty for nightly)'
        required: false
        default: ''

# 授予 GITHUB_TOKEN 写入权限以创建 release
permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        include:
#          - os: windows-latest
#            platform: win32
#            arch: x64
#            build_command: make
#            artifact_name: tx-5dr-windows-x64
            
          - os: macos-latest
            platform: darwin
            arch: arm64
            build_command: make
            artifact_name: tx-5dr-macos-arm64
            
          - os: ubuntu-latest
            platform: linux
            arch: x64
            build_command: make
            artifact_name: tx-5dr-linux-x64
            
          - os: ubuntu-24.04-arm
            platform: linux
            arch: arm64
            build_command: make
            artifact_name: tx-5dr-linux-arm64

    runs-on: ${{ matrix.os }}
    timeout-minutes: 60

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.15.1'

      - name: Enable Corepack and setup Yarn
        shell: bash
        run: |
          corepack enable
          corepack prepare yarn@4.9.1 --activate
          yarn --version || {
            echo "Corepack failed, installing Yarn 4.9.1 manually"
            npm install -g yarn@4.9.1
            yarn --version
          }

      - name: Verify Yarn configuration
        shell: bash
        run: |
          echo "=== Verifying Yarn PnP is disabled ==="
          if [ -f .yarnrc.yml ]; then
            echo "Found .yarnrc.yml:"
            cat .yarnrc.yml
            if grep -q "nodeLinker: node-modules" .yarnrc.yml; then
              echo "✓ nodeLinker is set to node-modules (PnP disabled)"
            else
              echo "⚠ Warning: nodeLinker not set to node-modules"
            fi
          else
            echo "⚠ Warning: .yarnrc.yml not found"
          fi

      - name: Setup Python (for native modules)
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libasound2-dev libpulse-dev \
            libx11-dev libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev libxext-dev \
            portaudio19-dev build-essential python3-dev pkg-config \
            xz-utils rpm
          
      - name: Setup MSBuild (Windows)
        if: matrix.os == 'windows-latest'
        uses: microsoft/setup-msbuild@v1

      - name: Verify Yarn version
        run: |
          echo "Node version: $(node --version)"
          echo "Yarn version: $(yarn --version)"
          echo "Package manager in package.json: $(grep packageManager package.json)"

      - name: Install dependencies
        run: |
          echo "=== Installing dependencies with Yarn 4 (node-modules mode) ==="
          echo "Note: Using node-modules linker instead of PnP for better compatibility"
          yarn install || {
            echo "First install attempt failed, applying naudiodon2 fixes..."
            node scripts/fix-naudiodon.js || true
            echo "Clearing yarn cache and retrying..."
            yarn cache clean || true
            yarn install || {
              echo "Second install failed, trying with network concurrency limit..."
              yarn install --network-concurrency 1 || {
                echo "Final fallback: installing with inline builds..."
                yarn install --inline-builds
              }
            }
          }
        env:
          npm_config_cache: .npm
          ELECTRON_CACHE: .electron-cache
          ELECTRON_BUILDER_CACHE: .electron-builder-cache
          # Try to use prebuilt binaries first
          npm_config_build_from_source: false
          # Ensure proper build environment
          CC: gcc
          CXX: g++
          # Force Yarn to use node-modules linker (should be in .yarnrc.yml)
          YARN_NODE_LINKER: node-modules

      - name: Generate ICO file (Windows)
        if: matrix.os == 'windows-latest'
        run: node scripts/generate-ico.js

      - name: Import Code Signing Certificate (macOS)
        if: matrix.os == 'macos-latest'
        env:
          MACOS_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE_BASE64 }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
        run: |
          echo "$MACOS_CERTIFICATE" | base64 --decode > certificate.p12
          security create-keychain -p actions temp.keychain
          security default-keychain -s temp.keychain
          security unlock-keychain -p actions temp.keychain
          security import certificate.p12 -k temp.keychain -P "$MACOS_CERTIFICATE_PWD" -T /usr/bin/codesign -T /usr/bin/productbuild
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k actions temp.keychain
          security set-keychain-settings -t 3600 -u temp.keychain
          rm -f certificate.p12

          echo "=== 验证证书导入 ==="
          security find-identity -v -p codesigning temp.keychain
          echo "✅ 证书导入成功"

      - name: Build application
        run: yarn build
        env:
          NODE_ENV: production

      - name: Prepare portable Node runtime
        shell: bash
        run: |
          set -euo pipefail
          NODE_VERSION="22.15.1"
          PLATFORM="${{ matrix.platform }}"
          ARCH="${{ matrix.arch }}"
          TRIPLET="${PLATFORM}-${ARCH}"
          echo "Preparing portable node ${NODE_VERSION} for ${TRIPLET}"

          mkdir -p resources/bin/${TRIPLET}
          mkdir -p resources/licenses

          if [ "${PLATFORM}" = "darwin" ]; then
            PKG="node-v${NODE_VERSION}-darwin-${ARCH}.tar.xz"
            URL="https://nodejs.org/dist/v${NODE_VERSION}/${PKG}"
            echo "Downloading ${URL}"
            curl -fsSL -o ${PKG} ${URL}
            tar -xJf ${PKG}
            SRC_DIR=$(echo node-v${NODE_VERSION}-darwin-${ARCH})
            install -m 0755 ${SRC_DIR}/bin/node resources/bin/${TRIPLET}/node
            cp -f ${SRC_DIR}/LICENSE resources/licenses/nodejs-LICENSE || true
            # Clean up temporary archive and extracted directory to avoid packaging them
            rm -rf "${PKG}" "${SRC_DIR}"
          elif [ "${PLATFORM}" = "linux" ]; then
            PKG="node-v${NODE_VERSION}-linux-${ARCH}.tar.xz"
            URL="https://nodejs.org/dist/v${NODE_VERSION}/${PKG}"
            echo "Downloading ${URL}"
            curl -fsSL -o ${PKG} ${URL}
            tar -xJf ${PKG}
            SRC_DIR=$(echo node-v${NODE_VERSION}-linux-${ARCH})
            install -m 0755 ${SRC_DIR}/bin/node resources/bin/${TRIPLET}/node
            strip resources/bin/${TRIPLET}/node || true
            cp -f ${SRC_DIR}/LICENSE resources/licenses/nodejs-LICENSE || true
            # Clean up temporary archive and extracted directory to avoid packaging them
            rm -rf "${PKG}" "${SRC_DIR}"
          else
            # Windows
            PKG="node-v${NODE_VERSION}-win-${ARCH}.zip"
            URL="https://nodejs.org/dist/v${NODE_VERSION}/${PKG}"
            echo "Downloading ${URL}"
            curl -fsSL -o ${PKG} ${URL}
            # Use bsdtar to extract zip on Windows runner
            tar -xf ${PKG}
            SRC_DIR=$(echo node-v${NODE_VERSION}-win-${ARCH})
            mkdir -p resources/bin/${TRIPLET}
            cp -f ${SRC_DIR}/node.exe resources/bin/${TRIPLET}/node.exe
            cp -f ${SRC_DIR}/LICENSE resources/licenses/nodejs-LICENSE || true
            # Clean up temporary archive and extracted directory to avoid packaging them
            rm -rf "${PKG}" "${SRC_DIR}"
          fi

          echo "Portable node prepared:"
          ls -la resources/bin/${TRIPLET}

      # macOS: fix wsjtx-lib prebuilt dylib install_names to load from its own folder
      - name: Patch wsjtx-lib dylib install names (macOS)
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          set -euo pipefail
          echo "Patching wsjtx-lib install names..."
          ROOT=$(pwd)
          PREBUILT_DIR="$ROOT/node_modules/wsjtx-lib/prebuilds/darwin-arm64"
          if [ ! -d "$PREBUILT_DIR" ]; then
            echo "wsjtx-lib prebuild dir not found: $PREBUILT_DIR"
            exit 0
          fi

          # Ensure libquadmath and libgcc_s are present (copy from Homebrew GCC)
          GCC_PREFIX=$(brew --prefix gcc@14 || brew --prefix gcc)
          echo "GCC prefix: $GCC_PREFIX"
          cp -Lv $(ls "$GCC_PREFIX"/lib/gcc/*/libquadmath.0.dylib | head -n1) "$PREBUILT_DIR" || true
          cp -Lv $(ls "$GCC_PREFIX"/lib/gcc/*/libgcc_s.1.1.dylib | head -n1) "$PREBUILT_DIR" || true

          pushd "$PREBUILT_DIR" >/dev/null
          set +e
          # Set ids to @loader_path
          install_name_tool -id @loader_path/libfftw3f.3.dylib libfftw3f.3.dylib 2>/dev/null || true
          install_name_tool -id @loader_path/libfftw3f_threads.3.dylib libfftw3f_threads.3.dylib 2>/dev/null || true
          install_name_tool -id @loader_path/libgfortran.5.dylib libgfortran.5.dylib 2>/dev/null || true
          [ -f libquadmath.0.dylib ] && install_name_tool -id @loader_path/libquadmath.0.dylib libquadmath.0.dylib || true
          [ -f libgcc_s.1.1.dylib ] && install_name_tool -id @loader_path/libgcc_s.1.1.dylib libgcc_s.1.1.dylib || true

          # Fix dependencies to @loader_path
          install_name_tool -change /opt/homebrew/opt/fftw/lib/libfftw3f.3.dylib @loader_path/libfftw3f.3.dylib wsjtx_lib_nodejs.node 2>/dev/null || true
          install_name_tool -change /opt/homebrew/opt/fftw/lib/libfftw3f_threads.3.dylib @loader_path/libfftw3f_threads.3.dylib wsjtx_lib_nodejs.node 2>/dev/null || true
          # GCC dylibs may vary by version; try both gcc@14 and generic gcc paths
          install_name_tool -change /opt/homebrew/opt/gcc@14/lib/gcc/14/libgfortran.5.dylib @loader_path/libgfortran.5.dylib wsjtx_lib_nodejs.node 2>/dev/null || true
          install_name_tool -change /opt/homebrew/opt/gcc/lib/gcc/*/libgfortran.5.dylib @loader_path/libgfortran.5.dylib wsjtx_lib_nodejs.node 2>/dev/null || true
          install_name_tool -change /opt/homebrew/opt/gcc@14/lib/gcc/14/libquadmath.0.dylib @loader_path/libquadmath.0.dylib wsjtx_lib_nodejs.node 2>/dev/null || true
          install_name_tool -change /opt/homebrew/opt/gcc/lib/gcc/*/libquadmath.0.dylib @loader_path/libquadmath.0.dylib wsjtx_lib_nodejs.node 2>/dev/null || true

          # Fix secondary deps
          install_name_tool -change /opt/homebrew/opt/fftw/lib/libfftw3f.3.dylib @loader_path/libfftw3f.3.dylib libfftw3f_threads.3.dylib 2>/dev/null || true
          install_name_tool -change @rpath/libquadmath.0.dylib @loader_path/libquadmath.0.dylib libgfortran.5.dylib 2>/dev/null || true
          install_name_tool -change @rpath/libgcc_s.1.1.dylib @loader_path/libgcc_s.1.1.dylib libgfortran.5.dylib 2>/dev/null || true
          set -e
          popd >/dev/null

      - name: Package application
        shell: bash
        env:
          NODE_ENV: production
          PLATFORM: ${{ matrix.platform }}
          ARCH: ${{ matrix.arch }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          DEBUG: electron-osx-sign*
        run: |
          # macOS: 增加文件描述符限制,避免 EMFILE 错误
          if [ "${{ matrix.os }}" = "macos-latest" ]; then
            echo "🔧 增加文件描述符限制..."
            ulimit -n 10240
            echo "✅ 文件描述符限制已设置为: $(ulimit -n)"
          fi

          # macOS: 解锁钥匙串并提取证书 identity
          if [ "${{ matrix.os }}" = "macos-latest" ]; then
            echo "🔓 解锁钥匙串并提取证书..."
            security unlock-keychain -p actions temp.keychain

            CERT_IDENTITY=$(security find-identity -v -p codesigning temp.keychain | grep "Developer ID Application" | head -1 | grep -o '"[^"]*"' | tr -d '"')
            if [ -z "$CERT_IDENTITY" ]; then
              echo "❌ 错误: 未找到 Developer ID Application 证书"
              exit 1
            fi

            echo "✅ 使用证书: $CERT_IDENTITY"

            # 方式 1: export (可能不生效)
            export APPLE_IDENTITY="$CERT_IDENTITY"

            # 方式 2: 直接在命令前设置 (更可靠)
            echo "📦 开始打包 (使用环境变量)..."
            APPLE_IDENTITY="$CERT_IDENTITY" yarn ${{ matrix.build_command }}
          else
            echo "📦 开始打包..."
            yarn ${{ matrix.build_command }}
          fi

      - name: List build outputs (Debug)
        shell: bash
        run: |
          echo "=== Build Output Directory ==="
          ls -la out/ || echo "No out/ directory found"
          find out/ -type f -name "*.exe" -o -name "*.dmg" -o -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" -o -name "*.zip" -o -name "*.tar.gz" || echo "No installable files found"

      - name: Prepare artifacts (rename for nightly if needed)
        shell: bash
        run: |
          PLATFORM="${{ matrix.platform }}"
          ARCH="${{ matrix.arch }}"
          VERSION="${{ github.event.inputs.version }}"

          # 创建统一的产物目录
          mkdir -p release-artifacts

          # 判断是否为 nightly 版本（无版本号输入时）
          if [ -z "$VERSION" ]; then
            echo "📦 准备 Nightly 版本产物..."
            PREFIX="TX-5DR-nightly"
          else
            echo "📦 准备正式版本产物 ($VERSION)..."
            PREFIX="TX-5DR-${VERSION}"
          fi

          if [ "$PLATFORM" = "darwin" ]; then
            # macOS: 分别重命名 DMG 和 ZIP
            find out/make -name "*.dmg" -type f | while read -r file; do
              cp "$file" "release-artifacts/${PREFIX}-macos-${ARCH}.dmg"
              echo "✅ 已准备: ${PREFIX}-macos-${ARCH}.dmg"
            done

            find out/make -name "*.zip" -type f | while read -r file; do
              cp "$file" "release-artifacts/${PREFIX}-macos-${ARCH}.zip"
              echo "✅ 已准备: ${PREFIX}-macos-${ARCH}.zip"
            done
          elif [ "$PLATFORM" = "linux" ]; then
            # Linux: 分别重命名 DEB, RPM, ZIP
            find out/make -name "*.deb" -type f | while read -r file; do
              cp "$file" "release-artifacts/${PREFIX}-linux-${ARCH}.deb"
              echo "✅ 已准备: ${PREFIX}-linux-${ARCH}.deb"
            done

            find out/make -name "*.rpm" -type f | while read -r file; do
              cp "$file" "release-artifacts/${PREFIX}-linux-${ARCH}.rpm"
              echo "✅ 已准备: ${PREFIX}-linux-${ARCH}.rpm"
            done

            find out/make -name "*.zip" -type f | while read -r file; do
              cp "$file" "release-artifacts/${PREFIX}-linux-${ARCH}.zip"
              echo "✅ 已准备: ${PREFIX}-linux-${ARCH}.zip"
            done
          elif [ "$PLATFORM" = "win32" ]; then
            # Windows: EXE 和 ZIP
            find out/make -name "*.exe" -type f | while read -r file; do
              cp "$file" "release-artifacts/${PREFIX}-windows-${ARCH}.exe"
              echo "✅ 已准备: ${PREFIX}-windows-${ARCH}.exe"
            done

            find out/make -name "*.zip" -type f | while read -r file; do
              cp "$file" "release-artifacts/${PREFIX}-windows-${ARCH}.zip"
              echo "✅ 已准备: ${PREFIX}-windows-${ARCH}.zip"
            done
          fi

          echo "=== 产物准备完成 ==="
          ls -lh release-artifacts/

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: release-artifacts/*
          retention-days: 30

  create-release:
    needs: build
    runs-on: ubuntu-latest
    # 仅在非 PR 时创建 release（push 或手动触发）
    if: github.event_name != 'pull_request'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/

      - name: Prepare release assets
        shell: bash
        run: |
          echo "=== 准备 release 产物 ==="
          mkdir -p release-assets

          # 将所有产物移到统一目录
          find dist/ -type f \( -name "*.dmg" -o -name "*.zip" -o -name "*.deb" -o -name "*.rpm" -o -name "*.exe" \) -exec cp {} release-assets/ \;

          echo "=== Release 产物列表 ==="
          ls -lh release-assets/

      - name: Generate release info
        id: release_info
        run: |
          echo "timestamp=$(date +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT
          echo "short_sha=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT
          echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      # Nightly Release: 仅在 push 到 main/develop 时（无版本号输入）
      - name: Create or Update Nightly Release
        if: github.event.inputs.version == ''
        uses: ncipollo/release-action@v1
        with:
          tag: nightly
          name: "Nightly Build"
          body: |
            ## TX-5DR Nightly Build

            **自动构建于**: ${{ steps.release_info.outputs.timestamp }}
            **Commit**: [${{ steps.release_info.outputs.short_sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
            **Branch**: ${{ github.ref_name }}

            ### 📦 下载说明

            #### macOS (ARM64)
            - **DMG 安装包**: `TX-5DR-nightly-macos-arm64.dmg` - 推荐用于安装
            - **ZIP 便携版**: `TX-5DR-nightly-macos-arm64.zip` - 解压即用

            #### Linux (x64)
            - **DEB 包** (Ubuntu/Debian): `TX-5DR-nightly-linux-x64.deb`
            - **RPM 包** (Fedora/RHEL): `TX-5DR-nightly-linux-x64.rpm`
            - **ZIP 便携版**: `TX-5DR-nightly-linux-x64.zip`

            #### Linux (ARM64)
            - **DEB 包** (Ubuntu/Debian): `TX-5DR-nightly-linux-arm64.deb`
            - **RPM 包** (Fedora/RHEL): `TX-5DR-nightly-linux-arm64.rpm`
            - **ZIP 便携版**: `TX-5DR-nightly-linux-arm64.zip`

            ### ⚠️ 注意事项
            - 这是开发版本，可能包含未经充分测试的新功能
            - 每次推送到 main/develop 分支都会自动更新此版本
            - 如需稳定版本，请下载正式 Release

            ### 🔧 系统要求
            - Node.js >= 22.15.1 (已内置便携版)
            - macOS 11+ / Ubuntu 20.04+ / Fedora 35+
          allowUpdates: true
          removeArtifacts: true
          artifacts: "release-assets/*"
          token: ${{ secrets.GITHUB_TOKEN }}
          prerelease: true
          makeLatest: false

      # Official Release: 仅在手动触发且提供版本号时
      - name: Create Official Release
        if: github.event.inputs.version != ''
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.event.inputs.version }}
          name: "TX-5DR ${{ github.event.inputs.version }}"
          body: |
            ## TX-5DR Release ${{ github.event.inputs.version }}

            **发布日期**: ${{ steps.release_info.outputs.date }}
            **Commit**: [${{ steps.release_info.outputs.short_sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})

            ### 🚀 新功能
            - Electron 应用多平台自动构建
            - 支持 macOS、Linux 平台

            ### 📦 下载说明

            #### macOS (ARM64)
            - **DMG 安装包**: `TX-5DR-${{ github.event.inputs.version }}-macos-arm64.dmg` - 推荐
            - **ZIP 便携版**: `TX-5DR-${{ github.event.inputs.version }}-macos-arm64.zip`

            #### Linux (x64)
            - **DEB 包** (Ubuntu/Debian): `TX-5DR-${{ github.event.inputs.version }}-linux-x64.deb`
            - **RPM 包** (Fedora/RHEL): `TX-5DR-${{ github.event.inputs.version }}-linux-x64.rpm`
            - **ZIP 便携版**: `TX-5DR-${{ github.event.inputs.version }}-linux-x64.zip`

            #### Linux (ARM64)
            - **DEB 包** (Ubuntu/Debian): `TX-5DR-${{ github.event.inputs.version }}-linux-arm64.deb`
            - **RPM 包** (Fedora/RHEL): `TX-5DR-${{ github.event.inputs.version }}-linux-arm64.rpm`
            - **ZIP 便携版**: `TX-5DR-${{ github.event.inputs.version }}-linux-arm64.zip`

            ### 🔧 系统要求
            - Node.js >= 22.15.1 (已内置便携版)
            - 操作系统: macOS 11+, Ubuntu 20.04+, Fedora 35+

            ---
            构建于: ${{ steps.release_info.outputs.timestamp }}
          artifacts: "release-assets/*"
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: false
          prerelease: false
          makeLatest: true 
