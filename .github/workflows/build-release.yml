name: Build and Release Electron App

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: false
        default: ''

jobs:
  build:
    strategy:
      matrix:
        include:
#          - os: windows-latest
#            platform: win32
#            arch: x64
#            build_command: make
#            artifact_name: tx-5dr-windows-x64
            
          - os: macos-latest
            platform: darwin
            arch: arm64
            build_command: make
            artifact_name: tx-5dr-macos-arm64
            
          - os: ubuntu-latest
            platform: linux
            arch: x64
            build_command: make
            artifact_name: tx-5dr-linux-x64
            
#          - os: ubuntu-24.04-arm
#            platform: linux
#            arch: arm64
#            build_command: make
#            artifact_name: tx-5dr-linux-arm64

    runs-on: ${{ matrix.os }}
    timeout-minutes: 60

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.15.1'

      - name: Enable Corepack and setup Yarn
        shell: bash
        run: |
          corepack enable
          corepack prepare yarn@4.9.1 --activate
          yarn --version || {
            echo "Corepack failed, installing Yarn 4.9.1 manually"
            npm install -g yarn@4.9.1
            yarn --version
          }

      - name: Verify Yarn configuration
        shell: bash
        run: |
          echo "=== Verifying Yarn PnP is disabled ==="
          if [ -f .yarnrc.yml ]; then
            echo "Found .yarnrc.yml:"
            cat .yarnrc.yml
            if grep -q "nodeLinker: node-modules" .yarnrc.yml; then
              echo "✓ nodeLinker is set to node-modules (PnP disabled)"
            else
              echo "⚠ Warning: nodeLinker not set to node-modules"
            fi
          else
            echo "⚠ Warning: .yarnrc.yml not found"
          fi

      - name: Setup Python (for native modules)
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install system dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libasound2-dev libpulse-dev \
            libx11-dev libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev libxext-dev \
            portaudio19-dev build-essential python3-dev pkg-config \
            xz-utils rpm
          
      - name: Setup MSBuild (Windows)
        if: matrix.os == 'windows-latest'
        uses: microsoft/setup-msbuild@v1

      - name: Verify Yarn version
        run: |
          echo "Node version: $(node --version)"
          echo "Yarn version: $(yarn --version)"
          echo "Package manager in package.json: $(grep packageManager package.json)"

      - name: Install dependencies
        run: |
          echo "=== Installing dependencies with Yarn 4 (node-modules mode) ==="
          echo "Note: Using node-modules linker instead of PnP for better compatibility"
          yarn install || {
            echo "First install attempt failed, applying naudiodon2 fixes..."
            node scripts/fix-naudiodon.js || true
            echo "Clearing yarn cache and retrying..."
            yarn cache clean || true
            yarn install || {
              echo "Second install failed, trying with network concurrency limit..."
              yarn install --network-concurrency 1 || {
                echo "Final fallback: installing with inline builds..."
                yarn install --inline-builds
              }
            }
          }
        env:
          npm_config_cache: .npm
          ELECTRON_CACHE: .electron-cache
          ELECTRON_BUILDER_CACHE: .electron-builder-cache
          # Try to use prebuilt binaries first
          npm_config_build_from_source: false
          # Ensure proper build environment
          CC: gcc
          CXX: g++
          # Force Yarn to use node-modules linker (should be in .yarnrc.yml)
          YARN_NODE_LINKER: node-modules

      - name: Generate ICO file (Windows)
        if: matrix.os == 'windows-latest'
        run: node scripts/generate-ico.js

      - name: Build application
        run: yarn build
        env:
          NODE_ENV: production

      - name: Prepare portable Node runtime
        shell: bash
        run: |
          set -euo pipefail
          NODE_VERSION="22.15.1"
          PLATFORM="${{ matrix.platform }}"
          ARCH="${{ matrix.arch }}"
          TRIPLET="${PLATFORM}-${ARCH}"
          echo "Preparing portable node ${NODE_VERSION} for ${TRIPLET}"

          mkdir -p resources/bin/${TRIPLET}
          mkdir -p resources/licenses

          if [ "${PLATFORM}" = "darwin" ]; then
            PKG="node-v${NODE_VERSION}-darwin-${ARCH}.tar.xz"
            URL="https://nodejs.org/dist/v${NODE_VERSION}/${PKG}"
            echo "Downloading ${URL}"
            curl -fsSL -o ${PKG} ${URL}
            tar -xJf ${PKG}
            SRC_DIR=$(echo node-v${NODE_VERSION}-darwin-${ARCH})
            install -m 0755 ${SRC_DIR}/bin/node resources/bin/${TRIPLET}/node
            strip resources/bin/${TRIPLET}/node || true
            cp -f ${SRC_DIR}/LICENSE resources/licenses/nodejs-LICENSE || true
            # Clean up temporary archive and extracted directory to avoid packaging them
            rm -rf "${PKG}" "${SRC_DIR}"
          elif [ "${PLATFORM}" = "linux" ]; then
            PKG="node-v${NODE_VERSION}-linux-${ARCH}.tar.xz"
            URL="https://nodejs.org/dist/v${NODE_VERSION}/${PKG}"
            echo "Downloading ${URL}"
            curl -fsSL -o ${PKG} ${URL}
            tar -xJf ${PKG}
            SRC_DIR=$(echo node-v${NODE_VERSION}-linux-${ARCH})
            install -m 0755 ${SRC_DIR}/bin/node resources/bin/${TRIPLET}/node
            strip resources/bin/${TRIPLET}/node || true
            cp -f ${SRC_DIR}/LICENSE resources/licenses/nodejs-LICENSE || true
            # Clean up temporary archive and extracted directory to avoid packaging them
            rm -rf "${PKG}" "${SRC_DIR}"
          else
            # Windows
            PKG="node-v${NODE_VERSION}-win-${ARCH}.zip"
            URL="https://nodejs.org/dist/v${NODE_VERSION}/${PKG}"
            echo "Downloading ${URL}"
            curl -fsSL -o ${PKG} ${URL}
            # Use bsdtar to extract zip on Windows runner
            tar -xf ${PKG}
            SRC_DIR=$(echo node-v${NODE_VERSION}-win-${ARCH})
            mkdir -p resources/bin/${TRIPLET}
            cp -f ${SRC_DIR}/node.exe resources/bin/${TRIPLET}/node.exe
            cp -f ${SRC_DIR}/LICENSE resources/licenses/nodejs-LICENSE || true
            # Clean up temporary archive and extracted directory to avoid packaging them
            rm -rf "${PKG}" "${SRC_DIR}"
          fi

          echo "Portable node prepared:"
          ls -la resources/bin/${TRIPLET}

      # macOS: fix wsjtx-lib prebuilt dylib install_names to load from its own folder
      - name: Patch wsjtx-lib dylib install names (macOS)
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          set -euo pipefail
          echo "Patching wsjtx-lib install names..."
          ROOT=$(pwd)
          PREBUILT_DIR="$ROOT/node_modules/wsjtx-lib/prebuilds/darwin-arm64"
          if [ ! -d "$PREBUILT_DIR" ]; then
            echo "wsjtx-lib prebuild dir not found: $PREBUILT_DIR"
            exit 0
          fi

          # Ensure libquadmath and libgcc_s are present (copy from Homebrew GCC)
          GCC_PREFIX=$(brew --prefix gcc@14 || brew --prefix gcc)
          echo "GCC prefix: $GCC_PREFIX"
          cp -Lv $(ls "$GCC_PREFIX"/lib/gcc/*/libquadmath.0.dylib | head -n1) "$PREBUILT_DIR" || true
          cp -Lv $(ls "$GCC_PREFIX"/lib/gcc/*/libgcc_s.1.1.dylib | head -n1) "$PREBUILT_DIR" || true

          pushd "$PREBUILT_DIR" >/dev/null
          set +e
          # Set ids to @loader_path
          install_name_tool -id @loader_path/libfftw3f.3.dylib libfftw3f.3.dylib 2>/dev/null || true
          install_name_tool -id @loader_path/libfftw3f_threads.3.dylib libfftw3f_threads.3.dylib 2>/dev/null || true
          install_name_tool -id @loader_path/libgfortran.5.dylib libgfortran.5.dylib 2>/dev/null || true
          [ -f libquadmath.0.dylib ] && install_name_tool -id @loader_path/libquadmath.0.dylib libquadmath.0.dylib || true
          [ -f libgcc_s.1.1.dylib ] && install_name_tool -id @loader_path/libgcc_s.1.1.dylib libgcc_s.1.1.dylib || true

          # Fix dependencies to @loader_path
          install_name_tool -change /opt/homebrew/opt/fftw/lib/libfftw3f.3.dylib @loader_path/libfftw3f.3.dylib wsjtx_lib_nodejs.node 2>/dev/null || true
          install_name_tool -change /opt/homebrew/opt/fftw/lib/libfftw3f_threads.3.dylib @loader_path/libfftw3f_threads.3.dylib wsjtx_lib_nodejs.node 2>/dev/null || true
          # GCC dylibs may vary by version; try both gcc@14 and generic gcc paths
          install_name_tool -change /opt/homebrew/opt/gcc@14/lib/gcc/14/libgfortran.5.dylib @loader_path/libgfortran.5.dylib wsjtx_lib_nodejs.node 2>/dev/null || true
          install_name_tool -change /opt/homebrew/opt/gcc/lib/gcc/*/libgfortran.5.dylib @loader_path/libgfortran.5.dylib wsjtx_lib_nodejs.node 2>/dev/null || true
          install_name_tool -change /opt/homebrew/opt/gcc@14/lib/gcc/14/libquadmath.0.dylib @loader_path/libquadmath.0.dylib wsjtx_lib_nodejs.node 2>/dev/null || true
          install_name_tool -change /opt/homebrew/opt/gcc/lib/gcc/*/libquadmath.0.dylib @loader_path/libquadmath.0.dylib wsjtx_lib_nodejs.node 2>/dev/null || true

          # Fix secondary deps
          install_name_tool -change /opt/homebrew/opt/fftw/lib/libfftw3f.3.dylib @loader_path/libfftw3f.3.dylib libfftw3f_threads.3.dylib 2>/dev/null || true
          install_name_tool -change @rpath/libquadmath.0.dylib @loader_path/libquadmath.0.dylib libgfortran.5.dylib 2>/dev/null || true
          install_name_tool -change @rpath/libgcc_s.1.1.dylib @loader_path/libgcc_s.1.1.dylib libgfortran.5.dylib 2>/dev/null || true
          set -e
          popd >/dev/null

      - name: Package application
        run: yarn ${{ matrix.build_command }}
        env:
          NODE_ENV: production
          CSC_IDENTITY_AUTO_DISCOVERY: false
          PLATFORM: ${{ matrix.platform }}
          ARCH: ${{ matrix.arch }}

      - name: List build outputs (Debug)
        shell: bash
        run: |
          echo "=== Build Output Directory ==="
          ls -la out/ || echo "No out/ directory found"
          find out/ -type f -name "*.exe" -o -name "*.dmg" -o -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" -o -name "*.zip" -o -name "*.tar.gz" || echo "No installable files found"

      - name: Upload artifacts (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: |
            out/make/**/*.exe
            out/make/**/*.zip
          retention-days: 30

      - name: Upload artifacts (macOS)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: |
            out/make/**/*.zip
          retention-days: 30

      - name: Upload artifacts (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: |
            out/make/**/*.deb
            out/make/**/*.rpm
            out/make/**/*.zip
          retention-days: 30

  create-release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.version != ''
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/

      - name: Display structure of downloaded files
        run: ls -R dist/

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.version }}
          release_name: TX-5DR ${{ github.event.inputs.version }}
          body: |
            ## TX-5DR Release ${{ github.event.inputs.version }}
            
            ### 🚀 新功能
            - Electron应用多平台自动构建
            - 支持Windows、macOS、Linux平台
            
            ### 📦 下载说明
            - **Windows (x64)**: 下载 `.exe` 或 `.msi` 文件
            - **macOS (ARM64)**: 下载 `.dmg` 文件 
            - **Linux (x64/ARM64)**: 下载 `.AppImage`、`.deb` 或 `.rpm` 文件
            
            ### 🔧 系统要求
            - Node.js >= 22.15.1
            - 操作系统: Windows 10+, macOS 11+, Ubuntu 20.04+
            
            ---
            自动构建于: ${{ github.sha }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        run: |
          for file in dist/**/*; do
            if [ -f "$file" ]; then
              echo "Uploading $file"
              gh release upload ${{ github.event.inputs.version }} "$file" --clobber
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
